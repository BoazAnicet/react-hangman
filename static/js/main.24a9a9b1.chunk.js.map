{"version":3,"sources":["components/Keyboard.js","containers/Game.js","App.js","serviceWorker.js","index.js"],"names":["Keyboard","state","rowOne","split","rowTwo","rowThree","renderKeys","row","map","key","index","_this","props","clicked","includes","react_default","a","createElement","className","toUpperCase","onClick","this","Component","Game","word","correct","incorrect","gameOver","componentDidMount","newGame","setState","words","Math","floor","random","length","renderWord","char","_callee","indexes","regenerator_default","wrap","_context","prev","next","Object","toConsumableArray","concat","sort","indexOf","console","log","push","endGame","stop","_this$state","renderKeyboard","components_Keyboard","_this2","App","containers_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24a9a9b1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Keyboard extends Component {\r\n\tstate = {\r\n\t\trowOne: 'qwertyuiop'.split(''),\r\n\t\trowTwo: 'asdfghjkl'.split(''),\r\n\t\trowThree: 'zxcvbnm'.split(''),\r\n\t};\r\n\r\n\trenderKeys = row => {\r\n\t\treturn row.map((key, index) => {\r\n\t\t\tif (this.props.clicked.includes(key)) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div key={index} className='key key--disabled'>\r\n\t\t\t\t\t\t{key.toUpperCase()}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\tclassName='key'\r\n\t\t\t\t\t\tonClick={() => this.props.onClick(key)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{key.toUpperCase()}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className='keyboard'>\r\n\t\t\t\t<div className='row'>{this.renderKeys(this.state.rowOne)}</div>\r\n\t\t\t\t<div className='row'>{this.renderKeys(this.state.rowTwo)}</div>\r\n\t\t\t\t<div className='row'>{this.renderKeys(this.state.rowThree)}</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Keyboard;\r\n","import React, { Component } from 'react'\r\nimport Keyboard from '../components/Keyboard'\r\nimport words from '../words.json'\r\n\r\nclass Game extends Component {\r\n  state = {\r\n    word: '',\r\n    clicked: [],\r\n    correct: [],\r\n    incorrect: 0,\r\n    gameOver: false\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.newGame()\r\n  }\r\n\r\n  newGame = () => {\r\n    this.setState({\r\n      word: words[Math.floor(Math.random() * words.length)],\r\n      clicked: [],\r\n      correct: [],\r\n      incorrect: 0,\r\n      gameOver: false\r\n    })\r\n  }\r\n\r\n  renderWord = () => {\r\n    let word = this.state.word.split('').map((char, index) => {\r\n      if(this.state.correct.includes(index)) {\r\n        return <div className='character' key={index}>{char.toUpperCase()}</div>\r\n      } else if(this.state.gameOver) {\r\n        return <div className='character character--opaque'>{char.toUpperCase()}</div>\r\n      }\r\n      return <div className='character' key={index}></div>\r\n    })\r\n    return word\r\n  }\r\n\r\n  onClick = async key => {\r\n    this.setState({ clicked: [...this.state.clicked, key].sort() })\r\n\r\n    if(this.state.word.indexOf(key) >= 0){\r\n      let index = this.state.word.indexOf(key)\r\n      let indexes = []\r\n  \r\n      while (index >= 0) {\r\n        console.log(index)\r\n        indexes.push(index)\r\n        index = this.state.word.indexOf(key, index + 1)\r\n      }\r\n      await this.setState({ correct: [...this.state.correct, ...indexes].sort()})    \r\n    } else {\r\n      await this.setState({ incorrect: this.state.incorrect + 1})\r\n    }\r\n    await this.endGame()\r\n  }\r\n\r\n  endGame = () => {\r\n    const { incorrect, correct, word } = this.state\r\n    if(incorrect >= 6 || correct.length === word.length) {\r\n      this.setState({ gameOver: true })\r\n    }\r\n  }\r\n\r\n  renderKeyboard = () => {\r\n    if(!this.state.gameOver) {\r\n      return (\r\n        <Keyboard\r\n          onClick={this.onClick}\r\n          clicked={this.state.clicked}\r\n        />\r\n      )\r\n    }\r\n    return <div>Game over!</div>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='game'>\r\n        <div className='turns'>\r\n          <div>Turns: {6 - this.state.incorrect}</div>\r\n          <button className=\"btn\" onClick={() => this.newGame()}>New Game</button>\r\n        </div>\r\n        <div className='word'>\r\n          {this.renderWord()}\r\n        </div>\r\n        <div className='container'>\r\n          {this.renderKeyboard()}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game\r\n","import React, { Component } from 'react';\nimport Game from './containers/Game'\n\nclass App extends Component {\n  render() {\n    return (\n      <Game />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/main.scss'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}